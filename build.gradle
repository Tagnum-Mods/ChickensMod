plugins {
    id 'eclipse'
    id 'maven-publish'
    id "org.jetbrains.changelog" version "1.3.+"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mod_version}"
group = "com.tagnumelite.chickens" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "chickens-${mc_version}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    mappings channel: 'parchment', version: "${parchment_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'chickens'

            mods {
                chickens {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'chickens'

            mods {
                chickens {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'chickens'

            mods {
                chickens {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'chickens', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                chickens {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    //maven { url "http://mobiusstrip.eu/maven" }
    //maven { url = "http://chickenbones.net/maven/" }
    maven { name "BlameJared"; url "https://maven.blamejared.com" }
    maven { name "Tterrag"; url "https://maven.tterrag.com/" }
    maven { name "Progwml6"; url "https://dvs1.progwml6.com/files/maven/" }
    maven { name "ModMaven"; url "https://modmaven.dev" }
    maven {
        name "CurseMaven"
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly(fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}:api") {
        exclude group: "*"
    })
    runtimeOnly(fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
        exclude group: "*"
    })

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    implementation fg.deobf("curse.maven:jade-324717:${jade_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "chickens",
                "Specification-Vendor"    : "setycz",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "setycz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${-> version.get()}]"
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
}

if (System.getenv().CURSEFORGE_API_KEY != null) {
    curseforge {
        apiKey System.getenv().CURSEFORGE_API_KEY
        project {
            id = "${curse_project_id}"
            addGameVersion "${mc_version}"
            changelog = "${project.changelog.get(mod_version).toString()}"
            changelogType = 'markdown'
            releaseType = "${release_type}"

            relations {
                optionalDependency 'waila'
                optionalDependency 'just-enough-items-jei'
            }
        }
    }
}
